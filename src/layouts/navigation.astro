---
import type { HTMLAttributes } from 'astro/types';

const showTop = Astro.url.pathname !== '/';
const wrap = Astro.url.pathname === '/gyagu/';

interface Link {
  href: string;
  label: string;
  hidden?: boolean;
  show?: boolean;
}

const links: Link[] = [
  {
    href: '/',
    label: 'トップ',
    show: showTop,
  },
  {
    href: '/about-me/',
    label: 'すえ',
  },
  {
    href: '/souhait-chan/',
    label: 'すえちゃん',
  },
  {
    href: '/play/',
    label: 'お遊び',
  },
  {
    href: '/product/',
    label: '作ったもの',
  },
  {
    href: '/gyagu/',
    label: 'ギャグ',
    hidden: true,
  },
];

type Props = HTMLAttributes<'nav'>;
---

<nav {...Astro.props}>
  <h2>サイトナビゲーション</h2>
  <ul is='nagivation-list' data-current={Astro.url.pathname}>
    {
      links
        .filter(({ show }) => show !== false)
        .filter(({ href, hidden }) => !hidden || href === Astro.url.pathname)
        .map(({ href, label }) => (
          <li class:list={{ wrap }}>
            <a {href}>
              <span transition:name={`nav-link-${href}`}>{label}</span>
            </a>
          </li>
        ))
    }
  </ul>
</nav>

<script>
  class NavigationList extends HTMLUListElement {
    constructor() {
      super();

      const current = this.dataset.current;
      if (!current) return;

      const anchorList = this.querySelectorAll('a');
      for (const anchor of anchorList) {
        if (new URL(anchor.href).pathname === current) {
          anchor.classList.add('current');
          anchor.addEventListener('click', (event) => {
            event.preventDefault();
          });
        }
      }
    }
  }

  customElements.define('nagivation-list', NavigationList, {extends: 'ul'});
</script>

<style lang='scss'>
  @use '@/styles/colors' as c;
  @use '@/styles/shapes' as s;

  nav {
    padding: 0.25rem 0.5rem;
    background-color: c.$bg;
    border-radius: s.$radius;

    > h2 {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border-width: 0;
    }
  }
  ul {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    padding: 0;
    margin: 0;
    overflow-x: auto;
    overflow-y: hidden;
    list-style: none;

    > li {
      display: flex;
      justify-content: center;
      width: 100%;
      text-align: center;
      white-space: nowrap;
    }

    .wrap {
      white-space: wrap;
    }

    .current {
      color: c.$fg;
      text-decoration: none;
    }
  }
</style>
